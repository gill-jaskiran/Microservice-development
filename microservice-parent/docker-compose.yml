#---------------------------------------------------------------------------------------
# 1. docker-compose -p microservices-comp3095-ecommerce -f docker-compose.yml up -d
#       --- this command will start the containers in detached mode without rebuilding (if they already exist)
#
# 2. docker-compose - p microservices-comp3095-ecommerce -f docker-compose.yml up -d --build
#       --- this command forces the rebuild of images, even if the images already exists, before starting the containers
#
# --------------------------------------------------------------------------------------------------
version: '3.9'

services:

  api-gateway:
    image: api-gateway
    ports:
      - "9000:9000"
    build:
      context: ./api-gateway     # The directory where the Dockerfile resides
      dockerfile: ./Dockerfile   # Path to the Dockerfile
    container_name: api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVICES_PRODUCT_URL=http://product-service:8087
      - SERVICES_ORDER_URL=http://order-service:8082
      - SERVICES_INVENTORY_URL=http://inventory-service:8083
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:8080/realms/spring-microservices-security-realm
    depends_on:
      - product-service
      - order-service
      - inventory-service
      - keycloak
    networks:
      - spring

  notification-service:
    image: notification-service
    ports:
      - "8085:8085"
    build:
      context: ./notification-service  # The directory where the Dockerfile resides
      dockerfile: ./Dockerfile         # Specify the Dockerfile for use to build image
    container_name: notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_MAIL_HOST=sandbox.smtp.mailtrap.io
      - SPRING_MAIL_PORT=2525
      - SPRING_MAIL_USERNAME=d68602ed0b9ac4
      - SPRING_MAIL_PASSWORD=2908d79f17d568
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=notificationService
    depends_on:
      - kafka
    networks:
      - spring

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
    depends_on:
      - zookeeper
    networks:
      - spring

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - spring



  inventory-service:
    image: inventory-service
    ports:
      - "8083:8083"
    build:
      context: ./inventory-service     # The directory where the Dockerfile resides
      dockerfile: ./Dockerfile       # Specify the Dockerfile for use to build image
    container_name: inventory-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5434/inventory-service
      - SPRING_DATASOURCE_USERNAME:admin
      - SPRING_DATASOURCE_PASSWORD:password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-inventory
    networks:
      - spring



  order-service:
    image: order-service
    ports:
      - "8089:8089"
    build:
      context: ./order-service     # The directory where the Dockerfile resides
      dockerfile: ./Dockerfile       # Specify the Dockerfile for use to build image
    container_name: order-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring


  product-service:
    image: product-service
    ports:
      - "8087:8087"
    build:
      context: ./product-service     # The directory where the Dockerfile resides
      dockerfile: ./Dockerfile       # Specify the Dockerfile for use to build image
    container_name: product-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  mongodb:
    image: mongo:latest
    ports:
      - "21017:21017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js #:ro
    container_name: mongodb
    # restart: unless-stopped
    # command: mongod --auth
    networks:
      - spring


  mongo-express:
    image: mongo-express
    ports:
      - "8082:8082"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    container_name: comp3095-mongo-express
    depends_on:
      - mongodb
    networks:
      - spring

#optional
volumes:
  mongo-db:
    driver: local

networks:
  spring:
    driver: bridge